{"version":3,"sources":["components/SearchBox.js","components/Header.js","components/Card.js","components/MatchList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","state","value","e","onChange","this","input","target","setState","className","type","id","placeholder","bind","React","Component","Header","Card","character","characterName","killedBy","actorName","houseName","nickname","actors","actor","array","forEach","a","push","join","description","MatchList","matchList","characters","length","regex","RegExp","filter","split","some","el","match","map","renderCard","App","inputChange","fetch","res","json","userInput","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.50b154fb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n    };\n  }\n\n  onChange(e) {\n    const { onChange } = this.props;\n    const input = e.target.value;\n\n    this.setState({ value: input });\n    onChange(input);\n  }\n\n  render() {\n    const { value } = this.state;\n    return (\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-lg-6 col-md-8\">\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              id=\"search\"\n              className=\"form-control form-control-lg\"\n              placeholder=\"Enter character's name\"\n              value={value}\n              onChange={this.onChange.bind(this)}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nSearchBox.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nfunction Header() {\n  return (\n    <header className=\"mt-5 mb-5\">\n      <h1>Game of Thrones characters</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Card(props) {\n  const { character } = props;\n  const {\n    characterName, killedBy, actorName, houseName, nickname, actors,\n  } = character;\n\n  let actor = '';\n\n  // characters may have been played by multiple actors\n  if (actorName != null) {\n    actor = character.actorName;\n  } else if (actors != null) {\n    const array = [];\n    actors.forEach((a) => {\n      array.push(a.actorName);\n    });\n    actor = array.join(', ');\n  }\n\n  let description = '';\n  if (houseName) {\n    description += `House: ${houseName}`;\n  }\n  if (killedBy) {\n    description += `, Killed by: ${killedBy}`;\n  }\n  if (nickname) {\n    description += `, Nickname: ${nickname}`;\n  }\n  return (\n    <div className=\"card card-body mb-2\">\n      <h5>\n        {characterName}\n        <span className=\"text-info ml-3\">\n          {actor}\n        </span>\n      </h5>\n      <p className=\"text-muted mb-0\">\n        <small className=\"pr-4\">{description}</small>\n      </p>\n    </div>\n  );\n}\n\nCard.propTypes = {\n  character: PropTypes.any.isRequired,\n};\n\nexport default Card;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Card from './Card';\n\nclass MatchList extends React.Component {\n  renderCard(character) {\n    return (\n      <Card character={character} />\n    );\n  }\n\n  render() {\n    const { characters, input } = this.props;\n    let matchList;\n\n    if (input.length === 0) {\n      matchList = [];\n    } else {\n      const regex = new RegExp(`^${input}`, 'gi');\n\n      matchList = characters.filter((character) => {\n        // split name to display when someone starts typing name or surname or name and surname\n        const nameArray = character.characterName.split(' ');\n        return nameArray.some((el) => el.match(regex)) || character.characterName.match(regex);\n      });\n    }\n\n    return (\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-md-6\">\n          {matchList.map((character) => this.renderCard(character))}\n        </div>\n      </div>\n    );\n  }\n}\n\nMatchList.propTypes = {\n  characters: PropTypes.array.isRequired,\n  input: PropTypes.string.isRequired,\n};\n\nexport default MatchList;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport './bootstrap.min.css';\n\nimport SearchBox from './components/SearchBox';\nimport Header from './components/Header';\nimport MatchList from './components/MatchList';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      characters: [],\n    };\n    this.inputChange = this.inputChange.bind(this);\n  }\n\n  async componentDidMount() {\n    const res = await fetch('https://raw.githubusercontent.com/arkadiuszpasek/game-of-thrones-characters-search/master/data/characters.json');\n    const characters = await res.json();\n\n    this.setState({ characters });\n  }\n\n  inputChange(userInput) {\n    this.setState({ input: userInput });\n  }\n\n  render() {\n    const { input, characters } = this.state;\n    return (\n      <div className=\"container text-center\">\n        <Header />\n        <SearchBox input={input} onChange={this.inputChange} />\n        <MatchList characters={characters} input={input} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}